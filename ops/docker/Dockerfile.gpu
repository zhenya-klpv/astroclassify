# syntax=docker/dockerfile:1.6
ARG CUDA_VERSION=12.1.1
ARG UBUNTU_VERSION=22.04
ARG PYTHON_VERSION=3.12
ARG TORCH_VERSION=2.4.1
ARG TORCHVISION_VERSION=0.19.1
ARG CUDA_SHORT=cu121

FROM nvidia/cuda:${CUDA_VERSION}-cudnn8-devel-ubuntu${UBUNTU_VERSION} AS builder

ENV DEBIAN_FRONTEND=noninteractive \
    PIP_NO_CACHE_DIR=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1

RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        curl \
        ca-certificates \
        software-properties-common && \
    add-apt-repository ppa:deadsnakes/ppa && \
    apt-get update && \
    apt-get install -y --no-install-recommends \
        build-essential \
        git \
        libffi-dev \
        pkg-config \
        python${PYTHON_VERSION} \
        python${PYTHON_VERSION}-dev \
        python${PYTHON_VERSION}-venv && \
    rm -rf /var/lib/apt/lists/*

RUN update-alternatives --install /usr/bin/python3 python3 /usr/bin/python${PYTHON_VERSION} 1

RUN python3 -m venv /opt/venv && \
    . /opt/venv/bin/activate && \
    pip install --upgrade pip setuptools wheel

WORKDIR /app

COPY requirements.txt requirements.txt

# Build a requirements file without CPU wheels (torch/torchvision)
RUN python3 - <<'PY'\nfrom pathlib import Path\nlines = Path(\"requirements.txt\").read_text().splitlines()\nout = []\nskip_hashes = False\nfor line in lines:\n    if line.startswith('torch==') or line.startswith('torchvision=='):\n        skip_hashes = True\n        continue\n    if skip_hashes and line.startswith('    --hash='):\n        continue\n    skip_hashes = False\n    out.append(line)\nPath(\"requirements.no-torch.txt\").write_text(\"\\n\".join(out) + \"\\n\")\nPY

RUN . /opt/venv/bin/activate && \
    pip install --no-cache-dir -r requirements.no-torch.txt && \
    pip install --no-cache-dir \
        torch==${TORCH_VERSION}+${CUDA_SHORT} \
        torchvision==${TORCHVISION_VERSION}+${CUDA_SHORT} \
        --extra-index-url https://download.pytorch.org/whl/${CUDA_SHORT}

COPY . /workspace/app

# -----------------------------------------------------------------------------
FROM nvidia/cuda:${CUDA_VERSION}-cudnn8-runtime-ubuntu${UBUNTU_VERSION} AS runtime

ARG PYTHON_VERSION

ENV DEBIAN_FRONTEND=noninteractive \
    PIP_NO_CACHE_DIR=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PATH="/opt/venv/bin:${PATH}"

RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        curl \
        ca-certificates \
        software-properties-common && \
    add-apt-repository ppa:deadsnakes/ppa && \
    apt-get update && \
    apt-get install -y --no-install-recommends \
        python${PYTHON_VERSION} \
        python${PYTHON_VERSION}-venv \
        libffi8 \
        libglib2.0-0 \
        libgl1 \
        libjpeg62-turbo \
        libpng16-16 \
        libtiff5 \
        libopenblas0 \
    && rm -rf /var/lib/apt/lists/*

RUN update-alternatives --install /usr/bin/python3 python3 /usr/bin/python${PYTHON_VERSION} 1

COPY --from=builder /opt/venv /opt/venv

WORKDIR /app
COPY --from=builder /workspace/app /app

EXPOSE 8000

HEALTHCHECK --interval=30s --timeout=5s --start-period=45s --retries=3 \
    CMD curl -fsS http://localhost:8000/v1/health || exit 1

ENV NVIDIA_VISIBLE_DEVICES=all \
    NVIDIA_DRIVER_CAPABILITIES=compute,utility

CMD ["gunicorn", "-c", "ops/gunicorn.conf.py", "astroclassify.api.main:app"]
